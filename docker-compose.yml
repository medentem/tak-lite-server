version: '3.8'

services:
  # Main TAK Lite Server Application
  taklite-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: taklite-server
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://taklite:taklite@postgres:5432/taklite
      # Optional services (enable via compose profiles)
      - REDIS_URL=${REDIS_URL:-}
      - RABBITMQ_URL=${RABBITMQ_URL:-}
      - JWT_SECRET=${JWT_SECRET:-}
      - JWT_EXPIRES_IN=7d
      - WEBRTC_ICE_SERVERS=${WEBRTC_ICE_SERVERS:-}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGIN=${CORS_ORIGIN:-}
    depends_on:
      - postgres
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    restart: unless-stopped
    networks:
      - taklite-network

  # API Gateway / Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: taklite-nginx
    profiles: ["nginx"]
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - taklite-server
    restart: unless-stopped
    networks:
      - taklite-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: taklite-postgres
    environment:
      POSTGRES_DB: taklite
      POSTGRES_USER: taklite
      POSTGRES_PASSWORD: taklite
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - taklite-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: taklite-redis
    profiles: ["redis"]
    command: redis-server --appendonly yes --requirepass taklite
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - taklite-network

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: taklite-rabbitmq
    profiles: ["mq"]
    environment:
      RABBITMQ_DEFAULT_USER: taklite
      RABBITMQ_DEFAULT_PASS: taklite
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: unless-stopped
    networks:
      - taklite-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: taklite-prometheus
    profiles: ["monitoring"]
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus_rules.yml:/etc/prometheus/prometheus_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - taklite-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: taklite-grafana
    profiles: ["monitoring"]
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - taklite-network

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: taklite-elasticsearch
    profiles: ["monitoring"]
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - taklite-network

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: taklite-logstash
    profiles: ["monitoring"]
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - taklite-network

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: taklite-kibana
    profiles: ["monitoring"]
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - taklite-network

  # Filebeat for Log Collection
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: taklite-filebeat
    profiles: ["monitoring"]
    user: root
    volumes:
      - ./monitoring/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/taklite:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - logstash
    restart: unless-stopped
    networks:
      - taklite-network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: taklite-backup
    profiles: ["backup"]
    environment:
      POSTGRES_PASSWORD: taklite
    volumes:
      - ./backup:/backup
      - ./scripts/backup.sh:/backup.sh
    depends_on:
      - postgres
    command: sh -c "while true; do sleep 86400; /backup.sh; done"
    restart: unless-stopped
    networks:
      - taklite-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  taklite-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
